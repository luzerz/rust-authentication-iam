name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Add workflow permissions for better security and functionality
permissions:
  contents: read
  pull-requests: read
  security-events: write
  actions: read

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: postgres://test_user:test_pass@localhost:5433/test_auth_db
  RUST_BACKTRACE: 1

jobs:
  # Quick checks that can run in parallel
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: clippy
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Lint (clippy)
        run: cargo clippy --all -- -D warnings

  fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Check formatting
        run: cargo fmt --all -- --check

  # Unit tests without database (fast)
  test-unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Run unit tests
        run: |
          # Skip database tests by unsetting DATABASE_URL
          # This will cause database tests to be skipped
          unset DATABASE_URL && cargo test --lib --bins --tests --workspace

  # Integration tests with database
  test-integration:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_auth_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client
      - name: Install sqlx CLI
        run: cargo install sqlx-cli --no-default-features --features postgres
      - name: Wait for database
        run: |
          until pg_isready -h localhost -p 5433 -U test_user -d test_auth_db; do
            echo "Waiting for database..."
            sleep 2
          done
      - name: Run migrations
        run: sqlx migrate run --database-url $DATABASE_URL
      - name: Run database connectivity test
        run: cargo test test_database_connectivity -- --nocapture
      - name: Run integration tests
        run: cargo test --test infrastructure_tests --test integration_tests --release -- --nocapture

  # Coverage analysis
  coverage:
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_auth_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client
      - name: Install sqlx CLI
        run: cargo install sqlx-cli --no-default-features --features postgres
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
      - name: Wait for database
        run: |
          until pg_isready -h localhost -p 5433 -U test_user -d test_auth_db; do
            echo "Waiting for database..."
            sleep 2
          done
      - name: Run migrations
        run: sqlx migrate run --database-url $DATABASE_URL
      - name: Run code coverage
        run: cargo tarpaulin --out Xml --all --release --fail-under 60
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./cobertura.xml
          verbose: true
        continue-on-error: true

  # SonarCloud analysis
  sonarcloud:
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration, coverage]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_auth_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client
      - name: Install sqlx CLI
        run: cargo install sqlx-cli --no-default-features --features postgres
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
      - name: Wait for database
        run: |
          until pg_isready -h localhost -p 5433 -U test_user -d test_auth_db; do
            echo "Waiting for database..."
            sleep 2
          done
      - name: Run migrations
        run: sqlx migrate run --database-url $DATABASE_URL
      - name: Run tests with coverage for SonarCloud
        run: |
          cargo tarpaulin --out Xml --all --release --output-dir target/sonar
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 